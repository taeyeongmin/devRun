<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="community">
  <!-- 컬럼 글쓰기 -->
  <insert id="insertColumn">
  	insert into
  		community
  	values(
  		seq_community_no.nextval,
  		#{memberNo},
  		1,
  		#{title},
  		#{content},
  		default,
  		default,
  		default,
  		default,
  		#{hashtag},
  		#{thumbnail}
  	)
  </insert>
  
  <!-- 커뮤니티 통합 글쓰기 -->
  <insert id="insertCommunityWriteEnroll">
	insert into
		community
	values(
		seq_community_no.nextval,
		#{memberNo},
		#{pageCode},
		#{title},
		#{content},
		default,
		default,
		default,
		#{thumbnail},
		default,
		#{hashtag},
		default
	)
  </insert>
  
  <!-- 신고하기 -->
  <insert id="insertCommunityReport">
 	insert into
		report
	values(
		seq_report_no.nextval,
		#{reasonCate}, 
		#{reportRootCate},
		#{memberNo}, 
		#{id}, 
		#{targetPkNo}, 
		#{reportContent}, 
		#{sideNote}, 
		default, 
		default, 
		null, 
		null 
	)
  </insert>

  <select id="selectCommentCount" resultType="_int">
  	select
  		count(*)
  	from
  		community_comment
  	where
  		community_no = #{communityNo}
  </select>
  
  <!-- 좋아요순 리스트 -->
  <select id="selectLikeBoardList" resultType="communityEntity">
	select 
        c.community_no,
	    c.title,
	    (select nickname from member where member_no = c.member_no) nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    comment_count
	from 
		community c 
            left join(
                select 
                    community_no, 
                    count(comment_no) as comment_count 
                from 
                    community_comment 
                group by community_no) m
	on 
		c.community_no = m.community_no
	where
		page_code = #{pageCode}
	order by
	    like_count desc  
  </select>
  
  <!-- 답변순 리스트 -->
  <select id="selectCommentBoardList" resultType="communityEntity">
	select * from (
    select 
        c.community_no,
	    c.title,
	    (select nickname from member where member_no = c.member_no) nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    nvl(comment_count,0) as comment_count
	from 
		community c 
            left join(
                select 
                    community_no, 
                    count(comment_no) as comment_count 
                from 
                    community_comment 
                group by community_no) m
	on 
		c.community_no = m.community_no
	where
		page_code = #{pageCode})
	order by
	    comment_count desc 
  </select>
  
  <select id="selectjoinStartBoardList" resultType="communityEntity">
 	select * from (
    select 
        c.community_no,
	    c.title,
	    (select nickname from member where member_no = c.member_no) nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    nvl(comment_count,0) as comment_count
	from 
		community c 
            left join(
                select 
                    community_no, 
                    count(comment_no) as comment_count 
                from 
                    community_comment 
                group by community_no) m
	on 
		c.community_no = m.community_no
	where
		page_code = #{pageCode} and
        study_join_yn = 'Y')
	order by
	    community_no desc
  </select>
  
  <select id="selectjoinEndBoardList" resultType="communityEntity">
   	select * from (
    select 
        c.community_no,
	    c.title,
	    (select nickname from member where member_no = c.member_no) nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    nvl(comment_count,0) as comment_count
	from 
		community c 
            left join(
                select 
                    community_no, 
                    count(comment_no) as comment_count 
                from 
                    community_comment 
                group by community_no) m
	on 
		c.community_no = m.community_no
	where
		page_code = #{pageCode} and
        study_join_yn = 'N')
	order by
	    community_no desc
  </select>
  
  <!-- 컬럼 리스트 조회 -->
  <select id="selectColumnList" resultType="communityEntity">
  	select
  		c.*,
  		(select nickname from member where member_no = c.member_no) nickname
  	from
  		community c
  	where
  		page_code = 1
  	order by
  		community_no desc
  </select>
  
  <!-- 베스트 컬럼리스트 조회 -->
  <select id="columnBestList" resultType="communityEntity">
  	select
  		c.*,
  		(select nickname from member where member_no = c.member_no) nickname
  	from
  		community c
  	where
  		page_code = 1
  	order by
  		like_count desc
  </select>
  
<!-- ================================= 스터디 시작 ================================= -->
<!-- 스터디 리스트 조회 -->
<select id="selectStudyList" resultType="communityEntity">
	select 
        c.community_no,
	    c.title,
	    (select nickname from member where member_no = c.member_no) nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    m.comment_count,
	    c.study_join_yn
	from 
		community c 
            left join(
                select 
                    community_no, 
                    count(comment_no) as comment_count 
                from 
                    community_comment 
                group by community_no) m
	on 
		c.community_no = m.community_no
    where
        page_code = 3
	order by 
		community_no desc
</select>

<!-- 스터디 총 게시물 수 -->
<!-- select 태그의 resultType, 혹은 resultMap은 반드시 써준다. -->
<!-- 기본형 int일때는 _int라는 alias를 mybatis에서 제공한다. -->
<select id="selectStudyCount" resultType="_int">
	select
		count(*)
	from
		community
	where
		page_code = 3
</select>

<!-- 모집진행 게시물 수 -->
<select id="selectOneStudyJoinStartCount" resultType="_int">
	select
		count(*)
	from
		community
	where
		page_code = 3 and
		study_join_yn = 'Y'
	order by
		community_no desc
</select>

<!-- 모집완료 게시물 수 -->
<select id="selectOneStudyJoinEndCount" resultType="_int">
	select
		count(*)
	from
		community
	where
		page_code = 3 and
		study_join_yn = 'N'
	order by
		community_no desc	
</select>

<!-- ================================= 스터디 종료 ================================= -->
  
  <!-- Q&A 리스트 조회 -->
  <select id="selectQnAList" resultType="communityEntity">
  	select 
        c.community_no,
	    c.title,
	    (select nickname from member where member_no = c.member_no) nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    m.comment_count
	from 
		community c 
            left join(
                select 
                    community_no, 
                    count(comment_no) as comment_count 
                from 
                    community_comment 
                group by community_no) m
	on 
		c.community_no = m.community_no
    where
        page_code = 2
	order by 
		community_no desc
  
  </select>
  
  
  <!-- 자유게시판 리스트 조회 -->
  <select id="selectFreeboardList" resultType="communityEntity">
	select 
        c.community_no,
	    c.title,
	    (select nickname from member where member_no = c.member_no) nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    m.comment_count
	from 
		community c 
            left join(
                select 
                    community_no, 
                    count(comment_no) as comment_count 
                from 
                    community_comment 
                group by community_no) m
	on 
		c.community_no = m.community_no
    where
        page_code = 4
	order by 
		community_no desc
  </select>
  
  <!-- QnA 게시판 총 게시물 수 -->
  <select id="selectOneQnACount" resultType="_int">
  	select
  		count(*)
  	from
  		community
  	where
  		page_code = 2
  </select>
  
  <!-- 자유게시판 총 게시물 수 -->
  <!-- select 태그의 resultType, 혹은 resultMap은 반드시 써준다. -->
  <!-- 기본형 int일때는 _int라는 alias를 mybatis에서 제공한다. -->
  <select id="selectFreeboardCount" resultType="_int">
  	select
  		count(*)
  	from
  		community
  	where
  		page_code = 4
  </select>
  
  <!-- 커뮤니티 상세보기 -->
  <select id="selectOneCommunity" resultType="communityEntity">
	select
	    c.*,
	    (select nickname from member where member_no = c.member_no) nickname,
	    (select authority from authorities where member_no = c.member_no) authority
	from
	    community c
  	where
  		community_no = #{community_no}
  </select>
  
  <!-- 모집중에서 모집완료로 변경 -->
  <update id="updateJoinNo">
  	update
	    community
	set
		study_join_yn = 'N'
	where
	    community_no = #{communityNo}
  </update>
  
  <!-- 모집완료에서 모집중으로 변경 -->
    <update id="updateJoinYes">
  	update
	    community
	set
		study_join_yn = 'Y'
	where
	    community_no = #{communityNo}
  </update>
  
  <!-- 커뮤니티 수정하기 -->
  <update id="updateCommunity">
  	update
	    community
	set
	    title = #{title},
	    content = #{content},
	    enroll_date = default,
	    hashtag = #{hashtag},
	    thumbnail = #{thumbnail}
	where
	    community_no = #{communityNo}
  </update>
  
  <!-- 자유게시판 삭제하기 -->
  <delete id="communityDelete">
  	delete from 
    	community 
	where
    	community_no = #{communityNo}
  </delete>
  
  <!-- 자유게시판 댓글 -->
  <select id="selectCommentList" resultType="communityCommentEntity">
  	select
	    c.*,
	    (select nickname from member where member_no = c.member_no) nickname
	from
	    community_comment c
	where
	    community_no = #{communityNo}
	start with
	    comment_level = 1
	connect by
	    prior comment_no = comment_ref_no
	order siblings by
	    reg_date desc
  </select>
  
  <!-- 댓글 입력 -->
  <insert id="insertComment">
  	insert into community_comment
  	values(
  		seq_community_comment_no.nextval,
  		#{memberNo},
  		<choose>
			<when test="commentRefNo eq 0">
				null,
			</when>
			<when test="commentRefNo != 0">
				#{commentRefNo},
			</when>
  		</choose>
  		#{communityNo},
  		#{commentLevel},
  		#{content},
  		default
  	)
  </insert>
  
  <!-- 댓글 삭제 -->
  <delete id="commentDelete">
  	delete from 
    	community_comment 
	where
    	comment_no = #{commentNo}
  </delete>
  
  <!-- 조회수 증가 -->
  <update id="viewCount">
  	update
	    community
	set
	    view_count = view_count + 1
	where
	    community_no = #{communityNo}
  </update>
  
  <!-- 자유게시판 타입별 검색 -->
  <select id="selectBoardListByType" resultType="communityEntity">
	select
        c.community_no,
	    c.title,
	    n.nickname,
        c.enroll_date,
	   	c.like_count,
	   	c.view_count,
	    m.commentCount
	from 
		community c 
            left join( select  community_no,  count(comment_no) as commentCount 
                from 
                    community_comment 
                group by community_no) m
   	on 
		c.community_no = m.community_no and
		c.page_code = ${pageCode}
        left join (select member_no, nickname from member) n
	on 
        n.member_no = c.member_no
    where
		page_code = ${pageCode} and
        ${searchType} like '%'|| #{searchKeyword} ||'%'	
	order by
	    community_no desc
  </select>
  
  <!-- 자유게시판 타입별 검색 결과 카운팅 -->
  <select id="selectCommunityTotalCountByType" resultType="_int">
  	select
  		count(*)
  	from
  		community c join member m on
	    c.member_no = m.member_no
  	where
  		page_code = ${pageCode} and 
  		${searchType} like '%'|| #{searchKeyword} || '%'
  	order by
  		community_no desc
  </select>
  
  <!-- 자유게시판 좋아요 선택 유무 확인 -->
  <select id="didIHitLikes" resultType="_int">
  	select
  		count(*)
  	from
  		member_community_likee
  	where
  		member_no = #{memberNo} and
  		community_no = #{communityNo}
  </select>
  
  <!-- 자유게시판 좋아요 추가 -->
  <update id="freeboardLikeAdd">
  	update
  		community
  	set 
  		like_count = like_count + 1
  	where
  		community_no = #{communityNo}
  </update>
  
  <insert id="insertMemberCommunityLike">
  	insert into
  		member_community_likee
  	values (#{communityNo}, #{memberNo})
  </insert>
  
  <delete id="deleteMemberCommunityLike">
  	delete
  		member_community_likee
  	where
  		community_no = #{communityNo} and
  		member_no = #{memberNo}
  </delete>
  
  <select id="refreshCountLike" resultType="_int">
  	select
  		like_count
  	from
  		community
  	where
  		community_no = #{communityNo}
  </select>
  
  <!-- 자유게시판 좋아요 삭제 -->
  <update id="freeboardLikeDelete">
  	update
  		community
  	set
  		like_count = like_count - 1
  	where
  		community_no = #{communityNo}
  </update>
  
  <!-- 지원 mapper 시작 -->
  <select id="selectAllPostOrderByLatest" resultType="communityEntity">
  	select 
		c.*,
		m.commentCount
	from 
		community c left join(select community_no, count(comment_no) as commentCount from community_comment group by community_no) m
	on 
		c.community_no = m.community_no
	where
		c.member_no = #{memberNo}
	order by
		c.enroll_date desc
  </select>
  
  <select id="selectPostTotalCount" resultType="_int">
    select 
		count(*)
	from 
		community
	where
		member_no = #{memberNo}
  </select>
  
  <select id="selectAllPostOrderBySelectType" resultType="communityEntity">
  	select 
		c.*,
		m.commentCount
	from 
		community c left join(select community_no, count(comment_no) as commentCount from community_comment group by community_no) m
	on 
		c.community_no = m.community_no
	where
		c.member_no = #{memberNo}
	order by
		<!-- 옵션에 따라 정렬하도록 choose when으로 분기 -->
		<choose>
			<when test="selectType != null and selectType eq 'latest'">
				c.enroll_date desc
			</when>
			<when test="selectType != null and selectType eq 'commentCount'">
				m.commentCount desc nulls last
			</when>
			<when test="selectType != null and selectType eq 'viewCount'">
				c.view_count desc
			</when>
			<when test="selectType != null and selectType eq 'likeCount'">
				c.like_count desc
			</when>
			<when test="selectType != null and selectType eq 'oldest'">
				c.enroll_date
			</when>
		</choose>
  </select>
  
  <select id="selectAllLikeOrderByLatest" resultType="communityEntity">
  	select 
		c.*,
		m.commentCount
	from 
		community c left join(select community_no, count(comment_no) as commentCount from community_comment group by community_no) m
	on 
		c.community_no = m.community_no
	where
		c.community_no in (select community_no from member_community_likee where member_no = #{memberNo})
	order by
		c.enroll_date desc
  </select>
  
  <select id="selectLikeTotalCount" resultType="_int">
    select 
		count(*)
	from 
		member_community_likee
	where
		member_no = #{memberNo}
  </select>
  
  <select id="selectAllLikeOrderBySelectType" resultType="communityEntity">
  	select 
		c.*,
		m.commentCount
	from 
		community c left join(select community_no, count(comment_no) as commentCount from community_comment group by community_no) m
	on 
		c.community_no = m.community_no
	where
		c.community_no in (select community_no from member_community_likee where member_no = #{memberNo})
	order by
		<!-- 옵션에 따라 정렬하도록 choose when으로 분기 -->
		<choose>
			<when test="selectType != null and selectType eq 'latest'">
				c.enroll_date desc
			</when>
			<when test="selectType != null and selectType eq 'commentCount'">
				m.commentCount desc nulls last
			</when>
			<when test="selectType != null and selectType eq 'viewCount'">
				c.view_count desc
			</when>
			<when test="selectType != null and selectType eq 'likeCount'">
				c.like_count desc
			</when>
			<when test="selectType != null and selectType eq 'oldest'">
				c.enroll_date
			</when>
		</choose>
  </select>
  <!-- 지원 mapper 끝 -->
  <!-- 혜진 mapper 시작 -->
  <select id="selectBestCommunity" resultType="map">
  	select
  		c.community_no no,
  		c.page_code pagecode,
  		c.title title,
  		m.nickname nickname
  	from
  		community c left join member m
  			on c.member_no = m.member_no
  	where
  		trunc(c.enroll_date, 'd') between trunc(sysdate, 'd') and trunc(sysdate, 'd')+6
  	order by
  		c.like_count desc
  </select>
  <select id="selectQnaList" resultType="map">
  	select
  		c.community_no no,
  		c.title title,
  		m.nickname nickname
  	from
  		community c left join member m
  			on c.member_no = m.member_no
  	where
  		c.page_code = 2
  	order by
  		c.enroll_date desc
  		
  </select>
  <select id="findCommunitySearch" resultType="communityEntity">
  	select
  		c.community_no,
  		c.title,
  		c.content,
  		c.enroll_date,
  		c.page_code,
  		m.nickname
  	from
  		community c left join member m
  			on c.member_no = m.member_no
  	where
  		c.title like '%'||#{searchKeyword}||'%'
  			or c.content like '%'||#{searchKeyword}||'%'
  				or m.nickname like '%'||#{searchKeyword}||'%'
  	order by
  		c.enroll_date desc
  </select>
  <select id="findCommunityCnt" resultType="_int">
  	select
  		nvl(count(*),0)
  	from
  		community c left join member m
  			on c.member_no = m.member_no
  	where
  		c.title like '%'||#{searchKeyword}||'%'
  			or c.content like '%'||#{searchKeyword}||'%'
  				or m.nickname like '%'||#{searchKeyword}||'%'
  	
  </select>
  
  <select id="selectColumnCount" resultType="_int">
  	select
  		count(*) cnt
  	from
  		community
  	where
  		page_code = 1
  </select>
  <!-- 혜진 mapper 끝 -->
</mapper>
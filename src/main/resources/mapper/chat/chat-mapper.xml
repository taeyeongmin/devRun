<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="chat">
  <select id="selectAllMemberByNickname" resultType="member">
  	select
		*
	from
		member
	where
		LOWER(nickname) like LOWER('%'||#{searchNickname}||'%') and nickname != #{nickname}
  </select>
  
  <select id="findChatMemberByMemberNo" resultType="chatMember">
  	select
  		*
  	from
  		chat_member
  	where
  		member_no = #{memberNo} and member_no2 = #{receiverNo}
  </select>
  
  <insert id="insertChatMember">
  	insert into
  		chat_member(chat_id, member_no, member_no2)
  	values(
  		#{chatId},
  		#{memberNo},
  		#{memberNo2}
  	)
  </insert>
  
  <insert id="insertChatLog">
  	<selectKey keyProperty="no" resultType="int" order="BEFORE">			   
  		select seq_chat_log_no.nextval from dual
    </selectKey>
  	insert into
  		chat_log(no, chat_id, member_no, msg, log_time)
  	values(
  		#{no},
  		#{chatId},
  		#{memberNo},
  		#{msg},
  		#{logTime}
  	)
  </insert>
  
  <select id="findChatLogByChatId" resultMap="chatLogAssociation">
  	select
	    cl.*,
	    m.member_no member_no1,
	    m.id,
	    m.nickname,
	    m.pro_photo,
	    (select last_check from chat_member where member_no != cl.member_no and chat_id = #{chatId}) last_check
	from
	    chat_log cl left join member m
	        on cl.member_no = m.member_no
	where
	    chat_id = #{chatId}
	order by
	    log_time asc
  </select>
  <resultMap type="chatLog" id="chatLogAssociation">
  	<!-- 지금 상황에서 이부분은 생략할 수 없음. 뻔한 내용도 여기서는 다 써줘야 한다.-->
	<id column="no" property="no"/>
	<result column="chat_id" property="chatId"/>
	<result column="member_no" property="memberNo"/>
	<result column="msg" property="msg"/>
	<result column="log_time" property="logTime"/>
	<result column="last_check" property="lastCheck"/>
	<association property="member" javaType="member">
		<id column="member_no1" property="memberNo"/>
		<result column="id" property="id"/>
		<result column="nickname" property="nickname"/>
		<result column="pro_photo" property="proPhoto"/>
	</association>
  </resultMap>
  
  <!-- <select id="findChatLog" resultType="chatLog">
  	select
	    *
	from (
	    select
	        CL.*,
	        row_number() over(partition by chat_id order by no desc) rnum
	    from
	        chat_log CL) CL
	where
	    rnum = 1 and
	    chat_id in (select chat_id from chat_member where member_no = #{memberNo})
	order by
	    log_time desc
  </select> -->
  
  <!-- chatLogAssociation1 테스트 작업 - 구현다하고 chatLogAssociation과 동일하게 작동한다면 합칠 것 -->
  <select id="findChatLog" resultMap="chatLogAssociation1">
  	select
	    CL.*,
	    M.member_no member_no1,
		M.id,
		M.nickname,
		M.pro_photo,
        (select count(*) from chat_log where chat_id = CL.chat_id and member_no != #{memberNo} and log_time > (select last_check from chat_member where chat_id = CL.chat_id and member_no = #{memberNo})) unread_count
	from (
	    select
	        CL.*,
	        row_number() over(partition by chat_id order by no desc) rnum
	    from
	        chat_log CL) CL left join chat_member CM
	            on CL.chat_id = CM.chat_id
	            left join member M
	            on CM.member_no = M.member_no
	where
	    rnum = 1 and
	    CM.member_no != #{memberNo} and
	    CL.chat_id in (select chat_id from view_chat_exit_check where member_no = #{memberNo})
	order by
	    log_time desc
  </select>
  
  <resultMap type="chatLog" id="chatLogAssociation1">
  	<!-- 지금 상황에서 이부분은 생략할 수 없음. 뻔한 내용도 여기서는 다 써줘야 한다.-->
	<id column="no" property="no"/>
	<result column="chat_id" property="chatId"/>
	<result column="member_no" property="memberNo"/>
	<result column="msg" property="msg"/>
	<result column="log_time" property="logTime"/>
	<result column="unread_count" property="unreadCount"/>
	<association property="member" javaType="member">
		<id column="member_no1" property="memberNo"/>
		<result column="id" property="id"/>
		<result column="nickname" property="nickname"/>
		<result column="pro_photo" property="proPhoto"/>
	</association>
  </resultMap>
  
  
  <select id="selectOneReceiver" resultType="member">
  	select
	    m.*
	from
	    member m left join chat_member cm
	        on m.member_no = cm.member_no
	where
	    cm.member_no2 = #{memberNo} and cm.chat_id = #{chatId}
  </select>
  
  <update id="updateLastCheck">
  	update
  		chat_member
  	set
  		last_check = #{lastCheck}
  	where
  		chat_id = #{chatId}
  	  and
  	  	member_no = #{memberNo}
  </update>
  
  <select id="searchChatRoom" resultType="string">
  	select 
	    chat_id
	from 
	    chat_member cm left join member m
	        using(member_no)
	where 
	    member_no2 = #{memberNo} and LOWER(nickname) like LOWER('%'||#{searchNickname}||'%') and
	    chat_id in (select chat_id from view_chat_exit_check where member_no = #{memberNo})
  </select>
  
  <select id="findEndDate" resultType="_long">
  	select 
    	nvl((TO_NUMBER(end_date-TO_DATE('01-01-1970 09:00:00', 'DD-MM-YYYY HH24:MI:SS'))*24*60*60)*1000, 0) end_date
	from 
	    chat_member
	where 
	    member_no = #{memberNo} and chat_id = #{chatId}
  </select>
  
  <update id="exitChatRoom">
  	update 
  		chat_member
	set
	    end_date = current_date
	where
	    chat_id = #{chatId} and
	    member_no = #{memberNo}
  </update>
  
  <select id="selectMessageTotalUnreadCount" resultType="_int">
  	select
	    count(*)
	from
	    chat_member cm join chat_log cl
	        on cm.chat_id = cl.chat_id
	where
	    cm.member_no = #{memberNo} 
	    and 
	    cl.member_no != #{memberNo}
	    and
	    last_check <![CDATA[ < ]]> log_time
  </select>
  
</mapper>